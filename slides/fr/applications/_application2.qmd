::: {.panel-tabset}
## Sans Git

::::{.callout-tip collapse="true" icon=false}
## Partie 1 : Des notebooks √† un projet de type package

:::::{.nonincremental}

1. Lancez un service `VSCode` en cliquant sur [cette URL](https://datalab.sspcloud.fr/launcher/ide/vscode-python?autoLaunch=true&init.personalInit=%C2%ABhttps%3A%2F%2Fraw.githubusercontent.com%2FInseeFrLab%2Fformation-mlops%2Fmain%2Finit.sh%C2%BB&kubernetes.role=%C2%ABadmin%C2%BB). Ouvrez le service et saisissez le mot de passe du service.

2. Tous les scripts li√©s √† notre mod√®le personnalis√© sont stock√©s dans le dossier `src`. Consultez-les. Regardez √©galement le fichier `MLproject`.

3. Ex√©cutez un entra√Ænement du mod√®le √† l'aide de MLflow. Pour ce faire, ouvrez un terminal ({{< iconify ph list-bold >}} `-> Terminal -> New Terminal`) et ex√©cutez la commande suivante :

   ```sh
   export MLFLOW_EXPERIMENT_NAME="nace-prediction"
   mlflow run ~/work/formation-mlops/ --env-manager=local \
       -P remote_server_uri=$MLFLOW_TRACKING_URI \
       -P experiment_name=$MLFLOW_EXPERIMENT_NAME
   ```

4. Dans l'interface de `MLflow`, examinez les r√©sultats de votre ex√©cution pr√©c√©dente :

   * `Experiments -> nace-prediction -> <nom_run>`

5. Vous avez entra√Æn√© le mod√®le avec certains param√®tres par d√©faut. Dans le fichier `MLproject`, v√©rifiez les param√®tres disponibles. R√©-entra√Ænez un mod√®le avec diff√©rents param√®tres (par exemple, `dim = 25`).

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir la commande </b></font> 
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
    -P dim=25
```

</details>


6. Dans `MLflow`, comparez les 2 mod√®les en tra√ßant l'exactitude par rapport √† un param√®tre que vous avez modifi√© (par exemple `dim`)
   * `S√©lectionnez les 2 exp√©riences -> Compare -> Scatter Plot -> Select your X and Y axis` 
   
:::::
::::


## Avec Git

::::{.callout-tip collapse="true" icon=false}
## Partie 1 : Des notebooks √† un projet de type package

:::::{.nonincremental}

1. Lancez un service `VSCode` en cliquant sur [cette URL](https://datalab.sspcloud.fr/launcher/ide/vscode-python?autoLaunch=true&kubernetes.role=¬´admin¬ª). Ouvrez le service et saisissez le mot de passe du service.

2. Dans VSCode, ouvrez un terminal ({{< iconify ph list-bold >}} `-> Terminal -> New Terminal`) et r√©alisez les √©tapes 6 et 7 de [l'application 0](#app0) (clone et installation de packages).

3. Tous les scripts li√©s √† notre mod√®le personnalis√© sont stock√©s dans le dossier `src`. Consultez-les. Regardez √©galement le fichier `MLproject`.

4. Ex√©cutez un entra√Ænement du mod√®le √† l'aide de MLflow. Dans un terminal, ex√©cutez la commande suivante :

   ```sh
   export MLFLOW_EXPERIMENT_NAME="nace-prediction"
   mlflow run ~/work/formation-mlops/ --env-manager=local \
       -P remote_server_uri=$MLFLOW_TRACKING_URI \
       -P experiment_name=$MLFLOW_EXPERIMENT_NAME
   ```

5. Dans l'interface de `MLflow`, examinez les r√©sultats de votre ex√©cution pr√©c√©dente :

   * `Experiments -> nace-prediction -> <nom_experience>`

6. Vous avez entra√Æn√© le mod√®le avec certains param√®tres par d√©faut. Dans le fichier `MLproject`, v√©rifiez les param√®tres disponibles. R√©-entra√Ænez un mod√®le avec diff√©rents param√®tres (par exemple, `dim = 25`).

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir la commande </b></font> 
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
    -P dim=25
```

</details>


7. Dans `MLflow`, comparez les 2 mod√®les en tra√ßant l'exactitude par rapport √† un param√®tre que vous avez modifi√© (par exemple `dim`)
   * `S√©lectionnez les 2 exp√©riences -> Compare -> Scatter Plot -> Select your X and Y axis` 
   
:::::
::::
:::

## Application 2 {.scrollable}

:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Partie 2 : Distribution et interrogation d'un mod√®le personnalis√©

1. Explorez attentivement le fichier `src/train.py`. Quelles sont les principales diff√©rences avec l'application 1 ?
2. Pourquoi pouvons-nous dire que le mod√®le `MLflow` int√®gre le *preprocessing* ?
3. Dans `MLflow`, enregistrez votre dernier mod√®le en tant que `fasttext` pour le rendre facilement interrogeable depuis l'API `Python`.
4. Cr√©ez un script `predict_mlflow.py` dans le dossier `src` du projet. Ce script doit : 
    a. Charger la version 1 du mod√®le `fasttext` 
    b. Utiliser le mod√®le pour pr√©dire les codes NACE d'une liste donn√©e de descriptions d'activit√© (par exemple, `["vendeur d'huitres", "boulanger"]`).

üí° N'oubliez pas de lire la documentation de la fonction `predict()` de la classe personnalis√©e (`src/fasttext_wrapper.py`) pour comprendre le format attendu des entr√©es !

    
<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir le contenu du script </b></font> 
</summary>

```{.python filename="predict_mlflow.py"}
import mlflow

model_name = "fasttext"
version = 1

model = mlflow.pyfunc.load_model(
    model_uri=f"models:/{model_name}/{version}"
)

list_libs = ["vendeur d'huitres", "boulanger"]

test_data = {
    "query": list_libs,
    "k": 1
}

results = model.predict(test_data)
print(results)
```
</details>

5. Ex√©cutez votre script `predict_mlflow.py`.

<details> 
<summary> 
    <font size=\"3\" color=\"darkgreen\"><b>Cliquez pour voir la commande </b></font> 
</summary>

```shell
python formation-mlops/src/predict_mlflow.py
```

</details>

6. Assurez-vous que les deux descriptions suivantes donnent la m√™me pr√©diction principale : `"COIFFEUR"` et `"coiffeur, & 98789"`.
7. Modifiez la valeur du param√®tre `k` et essayez de comprendre comment la structure de la sortie a chang√© en cons√©quence.
::::
:::
