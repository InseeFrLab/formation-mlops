::: {.panel-tabset}
## Without Git

::::{.callout-tip collapse="true" icon=false}
## Part 1 : From notebooks to a package-like project

:::::{.nonincremental}

1. Launch a `VSCode` service by clicking [this URL](https://datalab.sspcloud.fr/launcher/ide/vscode-python?autoLaunch=true&init.personalInit=Â«https%3A%2F%2Fraw.githubusercontent.com%2FInseeFrLab%2Fformation-mlops%2Fmain%2Finit.shÂ»&kubernetes.role=Â«adminÂ»). Open the service and input the service password.
2. All scripts related to our custom model are stored in the `src` folder. Check them out. Have a look at the `MLproject` file as well.
3. Run a training of the model using MLflow. To do so, open a terminal ({{< iconify ph list-bold >}} `-> Terminal -> New Terminal`) and run the following command :

    ```sh
    export MLFLOW_EXPERIMENT_NAME="nace-prediction"
    mlflow run ~/work/formation-mlops/ --env-manager=local \
        -P remote_server_uri=$MLFLOW_TRACKING_URI \
        -P experiment_name=$MLFLOW_EXPERIMENT_NAME
    ```

4. In the UI of `MLflow`, look at the results of your previous run:
    + `Experiments -> nace-prediction -> <run_name>`
5. You have trained the model with some default parameters. In `MLproject` check the available parameters. Re-train a model with different parameters (e.g. `dim = 25`).

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
    -P dim=25
```

</details>


6. In `MLflow`, compare the 2 models by plotting the accuracy against one parameter you have changed (i.e. `dim`)
    + `Select the 2 runs -> Compare -> Scatter Plot -> Select your X and Y axis`
   
:::::
::::


## With Git

::::{.callout-tip collapse="true" icon=false}
## Part 1 : From notebooks to a package-like project

:::::{.nonincremental}

1. Launch a `VSCode` service by clicking [this URL](https://datalab.sspcloud.fr/launcher/ide/vscode-python?autoLaunch=true&kubernetes.role=Â«adminÂ»). Open the service and input the service password.
2. In VSCode, open a terminal ({{< iconify ph list-bold >}} `-> Terminal -> New Terminal`) and redo steps 6 and 7 of [application 0](#app0) (clone and package installation).
3. All scripts related to our custom model are stored in the `src` folder. Check them out. Have a look at the `MLproject` file as well.
4. Run a training of the model using MLflow. To do so, open a terminal and run the following command :

    ```sh
    export MLFLOW_EXPERIMENT_NAME="nace-prediction"
    mlflow run ~/work/formation-mlops/ --env-manager=local \
        -P remote_server_uri=$MLFLOW_TRACKING_URI \
        -P experiment_name=$MLFLOW_EXPERIMENT_NAME
    ```

5. In the UI of `MLflow`, look at the results of your previous run:
    + `Experiments -> nace-prediction -> <run_name>`
6. You have trained the model with some default parameters. In `MLproject` check the available parameters. Re-train a model with different parameters (e.g. `dim = 25`).

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
</summary>

```sh
mlflow run ~/work/formation-mlops/ --env-manager=local \
    -P remote_server_uri=$MLFLOW_TRACKING_URI \
    -P experiment_name=$MLFLOW_EXPERIMENT_NAME \
    -P dim=25
```

</details>


7. In `MLflow`, compare the 2 models by plotting the accuracy against one parameter you have changed (i.e. `dim`)
    + `Select the 2 runs -> Compare -> Scatter Plot -> Select your X and Y axis`
   
:::::
::::
:::

## Application 2 {.scrollable}

:::{.nonincremental}
:::: {.callout-tip collapse="true" icon=false}
## Part 2 : Distributing and querying a custom model

1. Explore the `src/train.py` file carefully. What are the main differences with application 1?
2. Why can we say that the `MLflow` model onboards the preprocessing?
3. In `MLflow`, register your last model as `fasttext` to make it easily queryable from the `Python` API
4. Create a script `predict_mlflow.py` in the `src` folder of the project. This script should:
    a. Load the version 1 of the `fasttext` model
    b. Use the model to predict the NACE codes of a given list of activity description (e.g. `["vendeur d'huitres", "boulanger"]`). 
    
ðŸ’¡ Don't forget to read the documentation of the `predict()` function of the custom class (`src/fasttext_wrapper.py`) to understand the expected format for the inputs !

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the content of the script </b></font>
</summary>

```python
import mlflow

model_name = "fasttext"
version = 1

model = mlflow.pyfunc.load_model(
    model_uri=f"models:/{model_name}/{version}"
)

list_libs = ["vendeur d'huitres", "boulanger"]

results = model.predict(list_libs, params={"k": 1})
print(results)
```

</details>

5. Run your `predict_mlflow.py` script.

<details>
<summary>
    <font size=\"3\" color=\"darkgreen\"><b>Click to see the command </b></font>
</summary>

```shell
python formation-mlops/src/predict_mlflow.py
```

</details>

6. Make sure that the two following descriptions give the same top prediction : `"COIFFEUR"` and `"coiffeur, & 98789"`.
7. Change the value of the parameter `k` and try to understand how the structure of the output changed as a result.
::::
:::
